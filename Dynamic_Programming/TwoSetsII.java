package Dynamic_Programming;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

public class TwoSetsII {

    static long[][] dp;

	public static long twoSetsII(int n){
		int MOD = (int) 1e9 + 7;
		int sum = (n * (n+1)) / 2;
		if(sum % 2 == 1) return 0;
		sum /= 2;
		sum -= n; // we subtract n from sum because in one set we take t
				  // and try to generate sum-n as then we would get unique subsets count
                  // i.e we just generate set 1 in which we have n and assume the other set is generated by the rest of the nums
                  // in that way we will just count num of sets in which there is n and it will give us unique count
                  // for sum 3 we will count just set {3} and assume set {1,2} is being generated

		dp = new long[n][sum+1];
		for(int i = 0; i < n; i++) dp[i][0] = 1;

		for(int i = 1; i < n; i++){
			for(int j = 1; j <= sum; j++){
				long take = 0;
				if(j >= i) 
					take = dp[i-1][j - i];
				
				long nottake = dp[i-1][j];

				dp[i][j] = (take + nottake) % MOD;
			}
		}

		return dp[n-1][sum];
	}
	
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

		int n = Integer.parseInt(br.readLine());
		bw.write(Long.toString(twoSetsII(n)));

		bw.flush();
		br.close();
		bw.close();
 
	}
}
